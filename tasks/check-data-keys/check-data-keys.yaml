---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: check-data-keys
  labels:
    app.kubernetes.io/version: "0.10.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to check that all required information is present to use the specified system(s) 
    and that the data is valid against the schema.
  params:
    - name: dataPath
      description: Path to the JSON string of the merged data to use
      type: string
    - name: schema 
      description: The URL to the schema to validate the data against
      default: https://raw.githubusercontent.com/seanconroy2021/release-service-catalog/refs/heads/RELEASE-987/schema/dataKeys.json
      type: string
    - name: systems
      description: The systems to check that all data keys are present for
      type: array
      default: []
  workspaces:
    - name: data
      description: The workspace where the data JSON file resides
  steps:
    - name: check-data-keys
      # TODO: Update the image to the latest release-service-utils image
      image: quay.io/redhat-user-workloads/rhtap-release-2-tenant/release-service/release-service-utils:on-pr-403edb0827b86a46933608edc09a8b8598373f0a 
      args: ["$(params.systems[*])"]
      script: |
        #!/usr/bin/env bash
        set -ex

        # Need "content.images", since this is nested key we need to check for it.

        KEYS_JSON='{
            "releaseNotes": [
                "product_id",
                "product_name",
                "product_version",
                "product_stream",
                "cpe",
                "type",
                "synopsis",
                "topic",
                "description",
                "solution",
                "references"
            ],
            "cdn": [
                "env"
            ]
        }'

        if [ ! -f "$(workspaces.data.path)/$(params.dataPath)" ] ; then
            echo "No data JSON was provided."
            exit 1
        fi

        if ! curl -s --fail-with-body "$(params.schema)" -o /tmp/schema.json ; then
            echo "Failed to fetch schema from $(params.schema)"
            cat /tmp/schema.json
            exit 1
        fi

        RC=0
        for SYSTEM in "$@" ; do
          if [[ $(jq -r ".$SYSTEM" <<< "$KEYS_JSON") == null ]] ; then
              echo "Unsupported system value: $SYSTEM"
              RC=1
        fi
        done

        if [ $RC -ne 0 ] ; then
            exit 1
        fi
      
        for system in "$@"; do
          REQUIRED_KEYS=$(echo "$KEYS_JSON" | jq -c --arg system "$system" '.[$system]')

          jq --arg system "$system" --argjson requiredKeys "$REQUIRED_KEYS" \
            '(.properties[$system].required) = $requiredKeys' \
            /tmp/schema.json > /tmp/schemaTmp.json

          mv /tmp/schemaTmp.json /tmp/schema.json
        done
 
        check-jsonschema --output-format=text --schemafile /tmp/schema.json "/workspace/data/$(params.dataPath)"
