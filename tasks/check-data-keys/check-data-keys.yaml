---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: check-data-keys
  labels:
    app.kubernetes.io/version: "0.10.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to check that all required information is present to use the specified system(s) 
    and that the data is valid against the schema.
  params:
    - name: dataPath
      description: Path to the JSON string of the merged data to use
      type: string
    - name: schema 
      description: The URL to the schema to validate the data against
      default: https://raw.githubusercontent.com/seanconroy2021/release-service-catalog/refs/heads/RELEASE-987/schema/dataKeys.json
      type: string
    - name: systems
      description: The systems to check that all data keys are present for
      type: array
      default: []
  workspaces:
    - name: data
      description: The workspace where the data JSON file resides
  steps:
    - name: check-data-keys
      # TODO: Update the image to the latest release-service-utils image
      image: quay.io/redhat-user-workloads/rhtap-release-2-tenant/release-service/release-service-utils:on-pr-403edb0827b86a46933608edc09a8b8598373f0a 
      args: ["$(params.systems[*])"]
      script: |
        #!/usr/bin/env bash
        set -ex

        if [ ! -f "/workspace/data/$(params.dataPath)" ]; then
            echo "Data JSON file not found: /workspace/data/$(params.dataPath)"
            exit 1
        fi

        if ! curl -s "$(params.schema)" -o /tmp/schema.json; then
            echo "Error: Failed to fetch schema from $(params.schema)"
            exit 1
        fi

        if ! jq empty /tmp/schema.json; then
            echo "Error: Invalid JSON schema in /tmp/schema.json"
            exit 1
        fi

        RC=0
        for system in "$@"; do
          echo "Checking if system $system is supported"
          if [[ $(jq -r ".properties | has(\"$system\")" /tmp/schema.json) != true ]]; then
              echo "Unsupported system value: $system"
              RC=1
          fi
        done

        if [ $RC -ne 0 ]; then
            exit 1
        fi

        echo "Adding required fields to root for system: $*"
        jq --argjson systems "$(printf '%s\n' "$@" | jq -R . | jq -s .)" \
          '.required = $systems' /tmp/schema.json > /tmp/schemaTmp.json
        mv /tmp/schemaTmp.json /tmp/schema.json

        for system in "$@"; do
          echo "Adding required fields to properties for system: $system"
          jq --arg system "$system" \
            '(.properties[$system].required) = (.properties[$system].properties | keys)' \
            /tmp/schema.json > /tmp/schemaTmp.json
          mv /tmp/schemaTmp.json /tmp/schema.json
        done

        check-jsonschema --output-format=text --schemafile /tmp/schema.json "/workspace/data/$(params.dataPath)"
